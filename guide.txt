อธิบายโค้ด
    -ในการทำงานของแต่ละ process ที่ถูกประมวลผลด้วย Scheduling Policy 
        ในที่นี้ เราจะทำแค่ 2 วิธี นั่นคือ  first come first serve กับ round robin 
            -และเพื่อดูผลการทำงานของ processes เราได้สร้าง function ขึ้นมา 3 function มีหน้าที่ดังนี้
                        -readProcessesFromFile  สำหรับการอ่านข้อมูลจากไฟล์ txt
                        -fcfs สำหรับการทำงานแบบ First Come First Serve 
                        -round robin  สำหรับการทำงานแบบ Round Robin

    รายละเอียดการทำงานของ แต่ละฟังก์ชัน 
        ฟังก์ชัน readProcessesFromFile(filename) 
            - รับพารามิเตอร์ file ซึ่งเป็นชื่อไฟล์ที่ต้องการอ่านข้อมูล
            - โดยใช้ fs.readFileSync(), โค้ดจะอ่านข้อมูลจากไฟล์และคืนค่าข้อมูลเป็นสตริงในรูปแบบของข้อความ (text)
            - ส่วนของโค้ดที่ตามมาจะทำการแยกสตริงเป็นบรรทัดด้วยเครื่องหมาย \n เพื่อเข้าถึงข้อมูลแต่ละบรรทัด
            - จากนั้นจะวนลูปผ่านlineที่อ่านเพื่อดึงข้อมูลแต่ละprocess
            - โค้ดจะแยกชื่อprocessและเวลาจากstringที่อ่าน และเก็บข้อมูลไว้ในรูปแบบของarray
            - ข้อมูลprocessจะถูกเก็บในอาร์เรย์ processes
            -ฟังก์ชั่นจะ return อาร์เรย์ processes ที่มีข้อมูลของprocessทั้งหมด    
        
        
        ฟังก์ชั่น fcfsScheduling(processes)
            - ฟังก์ชันนี้รับพารามิเตอร์ processes ที่เป็นข้อมูลของ process ที่ต้องการทำงานแบบ FCFS (First Come First Serve) scheduling           
            - ภายในฟังก์ชั่นจะมีตัวแปร currentTime เพื่อเก็บเวลา ณ ปัจจุบัน โดยเริ่มต้นที่ 0
            - จะมีตัวแปร responseTimes เพื่อเก็บ response time ของแต่ละprocess
            - จะมีตัวแปร output เพื่อเก็บผลลัพธ์ที่จะเขียนลงในไฟล์
            - และวนลูปผ่านprocessทั้งหมดในอาร์เรย์ processes:
                - จะดึงชื่อ processและเวลาการประมวลผลจาก tuple array
                - response ของprocessจะถูกตั้งค่าเป็นเวลา ณ ปัจจุบัน (currentTime)
                - นับเวลาที่ใช้ในการประมวลผลprocessโดยเพิ่มเวลาการประมวลผลใน currentTime
                - นำผลลัพธ์ที่ได้เพิ่มลงใน output โดยใช้รูปแบบที่กำหนด
            - เมื่อการวนลูปเสร็จแล้ว  โปรแกรมจะเขียน output ลงในไฟล์ output_js/schedule_fcfs.txt 
            โดยใช้ fs.writeFileSync และพิมพ์ข้อความ "schedule_fcfs.txt was created!" 
            หรือแสดงข้อผิดพลาดในกรณีที่เกิดข้อผิดพลาดในการเขียนไฟล์    

        roundRobinScheduling(processes, 10):

            - ฟังก์ชันนี้รับพารามิเตอร์ processes ที่เป็นข้อมูลของ process ที่ต้องการทำงานแบบ Round Robin scheduling 
             และ quantumTime เป็นค่าเวลาในการประมวลผลในแต่ละรอบ (quantum time)
            - ภายในฟังก์ชั่นจะมีตัวแปร currentTime เพื่อเก็บเวลาปัจจุบันที่เริ่มต้นที่ 0
            - มีการสร้างตัวแปร responseTimes เพื่อเก็บเวลา response ของแต่ละ process 
            - มีการตัวแปร output เพื่อเก็บ outputที่จะเขียนลงในไฟล์
            - วนลูปจนกว่าจะไม่มี process ในอาร์เรย์ processes:
                - pop ข้อมูล process แรกออกจากคิวโดยใช้ ฟังก์ชัน shift()
                - ทำการเช็คเงื่อนไขว่า response time  ของ process นั้นถูกกำหนดหรือยัง ถ้าไม่ได้กำหนดให้กำหนดให้เป็นเวลา ณ ปัจจุบัน (currentTime)
                  นับเวลาที่ใช้ในการประมวลผลของ process โดยเพิ่มเวลาประมวลผลใน currentTime
                - เพิ่มจำนวนครั้งที่ process ทำงานลงใน runningCounter
                - หากเวลาประมวลผลของ process มากกว่า quantumTime:
                    - ให้ประมวลผลคำสั่งในระยะเวลาของ quantumTime
                    - เพิ่มข้อมูลลงใน output โดยใช้รูปแบบที่กำหนด
                    - push process กลับเข้าคิวโดยตัดระยะเวลาที่ประมวลผลออกจาก instructionTime
                - หากเวลาประมวลผลของ process น้อยกว่าหรือเท่ากับ quantumTime:
                    - ให้ประมวลผลคำสั่งในเวลาทั้งหมดของ process 
                    - เพิ่มข้อมูลลงใน output โดยใช้รูปแบบที่กำหนด
                - เมื่อการวนลูปเสร็จสิ้น โปรแกรมจะเขียน output ลงในไฟล์ schedule_rr.txt โดยใช้ fs.writeFileSync   หรือแสดงข้อผิดพลาดในกรณีที่เกิดข้อผิดพลาดในการเขียนไฟล์

